
ios拍照1M的要比安卓的5M的图片还要清晰,都是同一环境,保存的都是JPEG

图像处理引擎 ... 95年JPEG处理引擎  ,05年skia开源的引擎
(基于JPEG,谷歌进行了阉割,去掉了哈夫曼算法,采用定长编码算法,导致图片处理之后变大了)

由于cup和内存在手机上都非常的吃紧,性能差. 哈夫曼算法很吃cup,被迫采用了定长编码,但是保留了哈夫曼解码

(微信的图片就是哈弗曼编码,其他设备收到可以解码就是因为谷歌保留了解码)

ARGB
一个像素点包含四个信息:Alpha  Red  Green  Blue

 a  b  c  d e(如果加了个f,就不能三位了)

a :0001 -->001
b :0100 -->100
c :0011 -->011
d :0101 -->101
e :0010 -->010

abcde acbde.....

用三位来表示一个字符信息,属于定长编码的最优
用三位的把它们拼起来就可以了

加权信息编码:
权:占的百分比

如果上面的b,d 占得百分比为0,那么上面的b,d就浪费了,可以用两位来表示了

优化后就可以两位:  a 01
        c 11
        e 10
   问题就是如何得到a,b,c,d,e出现的权重,这就是哈夫曼编码

哈弗曼编码:需要去扫描每个信息(图片信息---每一个像素包括ARGB) 计算量很大,很吃CPU.
有编码就有解码...也要用哈夫曼解码.


---------------------------实现--------------------------

下载JPEG引擎使用的库--libjepg库

基于该引擎来做一定的开发----自己实现编码。

1.导入库文件libjpegbither.so
2.导入头文件(C)
3.写mk文件
Android.mk
Applicatoin.mk

4.写代码
C++: XX.cpp
C:   XX.c


1.将android的bitmap解码，并转换成RGB数据
一个图片信息---像素点(argb)
alpha去掉


2.JPEG对象分配空间以及初始化
3.指定压缩数据源
4.获取文件信息
5.为压缩设置参数，比如图像大小、类型、颜色空间
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
6.开始压缩
jpeg_start_compress()
7.压缩结束
jpeg_finish_compress()
8.释放资源


----------------------------------------------------

数据传输效率优化

一、数据的序列化和反序列化
服务器对象Object----流--->客户端Object对象

序列化：
Serializable/Parcelable

时间：1ms * 10 * 50 * 20 = 10000ms
性能：内存的浪费和CPU计算时间的占用。

json/xml
json序列化的工具GSON/fastjson

FlatBuffer:基于二进制的文件。
json：基于字符串的

Gson.from("")
Gson.toString(object)

PeopleList{
	List<People> peoples;

}

FlatBuffer:

****.bin   FlatBuffer的二进制文件
****.fbs   读取FlatBuffer的描述文件
